# https://github.com/vtsykun/packeton/blob/master/docker-compose-split.yml
# https://docs.packeton.org/installation-docker.html

x-volumes: &default-volume
  volumes:
    - ./data:/data
    - ./var:/var/www/packagist/var
    - ./config.yaml:/var/www/packagist/config/packages/config.yaml

x-restart-policy: &restart_policy
  restart: unless-stopped

x-environment: &default-environment
  REDIS_URL: redis://redis
  DATABASE_URL: mysql://db:${DB_PASSWORD}@db:3306/db?serverVersion=10.11.2-MariaDB&charset=utf8mb4
  SKIP_INIT: 1

services:
  redis:
    image: redis:7
    init: true
    <<: *restart_policy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 50M
    volumes:
      - ./redis:/data
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.redis

  db:
    image: mariadb:11
    init: true
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "--user=db", "--password=${DB_PASSWORD:?DB_PASSWORD not set}"]
    <<: *restart_policy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 200M
    volumes:
      - ./database:/var/lib/mysql
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:?DB_ROOT_PASSWORD not set}
      # Create "db" user with password ${DB_PASSWORD} if it doesn't exist
      MARIADB_USER: db
      MARIADB_PASSWORD: ${DB_PASSWORD:?DB_PASSWORD not set}
      #Â Create database "db" if it doesn't exist
      MARIADB_DATABASE: db
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.mariadb

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    init: true
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 100M
    environment:
      # Default user to be logged in
      #PMA_USER: db
      #PMA_PASSWORD: ${DB_PASSWORD}
      # PhpMyAdmin User to manage PMA db
      PMA_PMADB: phpmyadmin
      PMA_CONTROLUSER: pma
      PMA_CONTROLPASS: ${DB_PMA_PASSWORD:?DB_PMA_PASSWORD not set}
      # Other settings
      UPLOAD_LIMIT: 100M
    networks:
      - default
      - traefik_proxy
    depends_on:
      - db
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.phpmyadmin
    labels:
      traefik.enable: true
      traefik.http.routers.packeton-phpmyadmin.entrypoints: websecure
      traefik.http.routers.packeton-phpmyadmin.rule: Host(`phpmyadmin-packeton.d3strukt0r.dev`)
      traefik.http.routers.packeton-phpmyadmin.tls: true
      traefik.http.routers.packeton-phpmyadmin.tls.certresolver: le

  php-fpm:
    image: packeton/packeton
    init: true
    command: ['php-fpm', '-F']
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 150M
    <<: [*restart_policy, *default-volume]
    environment:
      <<: *default-environment
      SKIP_INIT: 0
      WAIT_FOR_HOST: 'db:3306'
    depends_on:
      - db
      - redis
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.php-fpm

  nginx:
    image: packeton/packeton
    init: true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 50M
    <<: [*restart_policy, *default-volume]
    networks:
      - default
      - traefik_proxy
    command: >
      bash -c 'sed s/_PHP_FPM_HOST_/php-fpm:9000/g < docker/nginx/nginx-tpl.conf > /etc/nginx/nginx.conf && nginx'
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'php-fpm:9000'
    depends_on:
      - php-fpm
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.nginx
    labels:
      traefik.enable: true
      traefik.http.routers.packeton.entrypoints: websecure
      traefik.http.routers.packeton.rule: Host(`packeton.d3strukt0r.dev`)
      traefik.http.routers.packeton.tls: true
      traefik.http.routers.packeton.tls.certresolver: le

  worker:
    image: packeton/packeton
    init: true
    hostname: packeton-worker
    command: ['bin/console', 'packagist:run-workers', '-v']
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 60M
    user: www-data
    <<: [*restart_policy, *default-volume]
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'php-fpm:9000'
    depends_on:
      - php-fpm
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.worker

  cron:
    image: packeton/packeton
    init: true
    hostname: packeton-cron
    command: ['bin/console', 'okvpn:cron', '--demand', '--time-limit=3600']
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 50M
    user: www-data
    <<: [*restart_policy, *default-volume]
    environment:
      <<: *default-environment
      WAIT_FOR_HOST: 'php-fpm:9000'
    depends_on:
      - php-fpm
    logging:
      driver: fluentd
      options:
        tag: packeton.prod.cron

networks:
  traefik_proxy:
    external: true
